<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd">


<!--    &lt;!&ndash;    1.spring容器注册&ndash;&gt;-->

    <context:component-scan base-package="com.sz">
        <context:exclude-filter type="annotation"
                                expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
<!--    &lt;!&ndash;    3. 自动代理&ndash;&gt;-->
    <aop:aspectj-autoproxy/>
    <context:annotation-config/>

<!--    引入数据库相关信息配置文件-->
    <context:property-placeholder location="classpath:db.properties"/>
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="jdbcUrl" value="${url}"/>
        <property name="driverClass" value="${driver}"/>
        <property name="user" value="${shao}"/>
        <property name="password" value="${password}"/>

        <property name="maxPoolSize" value="30"/>
        <property name="minPoolSize" value="10"/>
<!--        关闭连接后不自动commit-->
<!--        <property name="autoCommitOnClose" value="false"/>-->
<!--        获取连接超时时间-->
<!--        <property name="checkoutTimeout" value="200000000"/>-->

<!--        当获取连接失败重试次数-->
<!--        <property name="acquireRetryAttempts" value="2"/>-->

    </bean>

<!--    如何整合mybatis-->
<!--    1, 注入一股mybatis的SqlsessionFactory, 这是我们要做的关键步骤 2. 声明式的事务管理-->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"></property>
        <!--        引入mappers文件-->
<!--        <property name="configLocation" value="classpath:mybatis-config.xml"/>-->
<!--        要求所有的mapper文件必须在com/sz/mapper/之下-->
        <property name="mapperLocations" value="classpath:com/sz/mapper/**/*.xml"/>
        <property name="configuration">
            <bean class="org.apache.ibatis.session.Configuration">
<!--                加入驼峰命名，其他mybatis配置也就是mybatis.cfg.xml的相关配置都会转移到这里来-->
                <property name="mapUnderscoreToCamelCase" value="true"/>

            </bean>
        </property>


<!--       插件配置 -->
        <property name="plugins">

            <array>
<!--                分页插件的配置，拦截器实现分页功能-->
                <bean class="com.github.pagehelper.PageInterceptor">
<!--                    这里的配置主要是演示如何使用，如果不理解一定要去掉下面的配置-->
                    <property name="properties">
                        <value>
                            helperDialect=mysql
                            reasonable=true
                            supportMethodsArguments=true
                            params=count=countSql
                            autoRuntimeDialect=true
                        </value>
                    </property>
                </bean>
            </array>

        </property>

    </bean>
<!--    持久层接口-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.sz.mapper"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactoryBean"/>
    </bean>

<!--    事务管理，使用数据源事务管理类进行管理-->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

<!--    确定事务管理的策略, transaction-manager:指向上面的transactionManager-->
    <tx:advice transaction-manager="transactionManager" id="transactionAdvice">
<!--        事务处理的相关值，以及他的传播-->
        <tx:attributes>
<!--            查询相关配置为只读，select开头或者get或者query-->
            <tx:method name="select*" read-only="true"/>
            <tx:method name="get*" read-only="true"/>
            <tx:method name="query*" read-only="true"/>
<!--            配置这个当处理出现异常是，代码回滚-->
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="add*" propagation="REQUIRED" rollback-for="Exception"/>
        </tx:attributes>

    </tx:advice>
<!--    使用aop的事务管理范围进行织入，明确几个点：1，对哪些地方需要事务管理execution书写
        2. 使用什么策略去管理，策略我们使用tx:advice全部书写其中，在我们的aop的advisor当中
        只需要引用这个事务管理者建议即可。
-->
    <aop:config>
        <aop:pointcut id="txCut" expression="execution(* com.sz.service.*.*(..))"/>
        <aop:advisor advice-ref="transactionAdvice" pointcut-ref="txCut"/>
    </aop:config>

<!--    采用注解进行事务配置，请在Service的实现类上加上@Transanctional注解-->
<!--    <tx:annotation-driven transaction-manager="transactionManager"/>-->
</beans>

















